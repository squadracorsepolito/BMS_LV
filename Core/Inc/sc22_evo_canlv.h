/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 38.0.2 Fri Jun 23 15:17:26 2023.
 */

#ifndef SC22_EVO_CANLV_H
#define SC22_EVO_CANLV_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define SC22_EVO_CANLV_STEERING_RTD_FRAME_ID (0x26u)
#define SC22_EVO_CANLV_STEERING_MOTOR_CONTROL_DEBUG_FRAME_ID (0x500u)
#define SC22_EVO_CANLV_BMSLV_TEMP_FRAME_ID (0x105u)
#define SC22_EVO_CANLV_BMSLV_CELL_VOLTAGE1_FRAME_ID (0x100u)
#define SC22_EVO_CANLV_BMSLV_CELL_VOLTAGE2_FRAME_ID (0x101u)
#define SC22_EVO_CANLV_BMSLV_BATTERY_PACK_GENERAL_FRAME_ID (0x102u)
#define SC22_EVO_CANLV_BMSLV_STATUS_FRAME_ID (0x103u)
#define SC22_EVO_CANLV_SENS_FRONT_1_FRAME_ID (0x05u)
#define SC22_EVO_CANLV_SENS_FRONT_2_FRAME_ID (0x10u)
#define SC22_EVO_CANLV_SENS_FRONT_3_FRAME_ID (0x120u)
#define SC22_EVO_CANLV_SENS_FRONT_SHUTDOWN_STATUS_FRAME_ID (0x31u)
#define SC22_EVO_CANLV_SENS_FRONT_NTC_FRAME_ID (0x400u)
#define SC22_EVO_CANLV_SENS_REAR_1_FRAME_ID (0x11u)
#define SC22_EVO_CANLV_SENS_REAR_3_FRAME_ID (0x121u)
#define SC22_EVO_CANLV_SENS_REAR_2_FRAME_ID (0x402u)
#define SC22_EVO_CANLV_SENS_REAR_NTC_FRAME_ID (0x401u)
#define SC22_EVO_CANLV_SENS_REAR_SHUTDOWN_STATUS_FRAME_ID (0x30u)
#define SC22_EVO_CANLV_TLB_BATTERY_TSAL_STATUS_FRAME_ID (0x07u)
#define SC22_EVO_CANLV_TLB_BATTERY_SHUT_STATUS_FRAME_ID (0x06u)
#define SC22_EVO_CANLV_D_SPACE_PERIPHERALS_CTRL_FRAME_ID (0x200u)
#define SC22_EVO_CANLV_D_SPACE_RTD_ACK_FRAME_ID (0x25u)

/* Frame lengths in bytes. */
#define SC22_EVO_CANLV_STEERING_RTD_LENGTH (1u)
#define SC22_EVO_CANLV_STEERING_MOTOR_CONTROL_DEBUG_LENGTH (1u)
#define SC22_EVO_CANLV_BMSLV_TEMP_LENGTH (8u)
#define SC22_EVO_CANLV_BMSLV_CELL_VOLTAGE1_LENGTH (8u)
#define SC22_EVO_CANLV_BMSLV_CELL_VOLTAGE2_LENGTH (6u)
#define SC22_EVO_CANLV_BMSLV_BATTERY_PACK_GENERAL_LENGTH (4u)
#define SC22_EVO_CANLV_BMSLV_STATUS_LENGTH (2u)
#define SC22_EVO_CANLV_SENS_FRONT_1_LENGTH (8u)
#define SC22_EVO_CANLV_SENS_FRONT_2_LENGTH (6u)
#define SC22_EVO_CANLV_SENS_FRONT_3_LENGTH (8u)
#define SC22_EVO_CANLV_SENS_FRONT_SHUTDOWN_STATUS_LENGTH (1u)
#define SC22_EVO_CANLV_SENS_FRONT_NTC_LENGTH (8u)
#define SC22_EVO_CANLV_SENS_REAR_1_LENGTH (6u)
#define SC22_EVO_CANLV_SENS_REAR_3_LENGTH (8u)
#define SC22_EVO_CANLV_SENS_REAR_2_LENGTH (4u)
#define SC22_EVO_CANLV_SENS_REAR_NTC_LENGTH (8u)
#define SC22_EVO_CANLV_SENS_REAR_SHUTDOWN_STATUS_LENGTH (1u)
#define SC22_EVO_CANLV_TLB_BATTERY_TSAL_STATUS_LENGTH (4u)
#define SC22_EVO_CANLV_TLB_BATTERY_SHUT_STATUS_LENGTH (3u)
#define SC22_EVO_CANLV_D_SPACE_PERIPHERALS_CTRL_LENGTH (3u)
#define SC22_EVO_CANLV_D_SPACE_RTD_ACK_LENGTH (1u)

/* Extended or standard frame types. */
#define SC22_EVO_CANLV_STEERING_RTD_IS_EXTENDED (0)
#define SC22_EVO_CANLV_STEERING_MOTOR_CONTROL_DEBUG_IS_EXTENDED (0)
#define SC22_EVO_CANLV_BMSLV_TEMP_IS_EXTENDED (0)
#define SC22_EVO_CANLV_BMSLV_CELL_VOLTAGE1_IS_EXTENDED (0)
#define SC22_EVO_CANLV_BMSLV_CELL_VOLTAGE2_IS_EXTENDED (0)
#define SC22_EVO_CANLV_BMSLV_BATTERY_PACK_GENERAL_IS_EXTENDED (0)
#define SC22_EVO_CANLV_BMSLV_STATUS_IS_EXTENDED (0)
#define SC22_EVO_CANLV_SENS_FRONT_1_IS_EXTENDED (0)
#define SC22_EVO_CANLV_SENS_FRONT_2_IS_EXTENDED (0)
#define SC22_EVO_CANLV_SENS_FRONT_3_IS_EXTENDED (0)
#define SC22_EVO_CANLV_SENS_FRONT_SHUTDOWN_STATUS_IS_EXTENDED (0)
#define SC22_EVO_CANLV_SENS_FRONT_NTC_IS_EXTENDED (0)
#define SC22_EVO_CANLV_SENS_REAR_1_IS_EXTENDED (0)
#define SC22_EVO_CANLV_SENS_REAR_3_IS_EXTENDED (0)
#define SC22_EVO_CANLV_SENS_REAR_2_IS_EXTENDED (0)
#define SC22_EVO_CANLV_SENS_REAR_NTC_IS_EXTENDED (0)
#define SC22_EVO_CANLV_SENS_REAR_SHUTDOWN_STATUS_IS_EXTENDED (0)
#define SC22_EVO_CANLV_TLB_BATTERY_TSAL_STATUS_IS_EXTENDED (0)
#define SC22_EVO_CANLV_TLB_BATTERY_SHUT_STATUS_IS_EXTENDED (0)
#define SC22_EVO_CANLV_D_SPACE_PERIPHERALS_CTRL_IS_EXTENDED (0)
#define SC22_EVO_CANLV_D_SPACE_RTD_ACK_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */


/**
 * Signals in message Steering_RTD.
 *
 * All signal values are as on the CAN bus.
 */
struct sc22_evo_canlv_steering_rtd_t {
    /**
     * Range: 0..255 (0.000000..255.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t rtd_cmd;
};

/**
 * Signals in message Steering_MotorControl_Debug.
 *
 * All signal values are as on the CAN bus.
 */
struct sc22_evo_canlv_steering_motor_control_debug_t {
    /**
     * Range: 0..1 (0.000000..1.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    int8_t front_left_on;

    /**
     * Range: 0..1 (0.000000..1.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    int8_t front_right_on;

    /**
     * Range: 0..1 (0.000000..1.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    int8_t rear_left_on;

    /**
     * Range: 0..1 (0.000000..1.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    int8_t rear_right_on;
};

/**
 * Signals in message BMSLV_Temp.
 *
 * All signal values are as on the CAN bus.
 */
struct sc22_evo_canlv_bmslv_temp_t {
    /**
     * Range: 0..1 (0.000000..1.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    int8_t ntc_is_first_message;

    /**
     * Range: -32..991 (0.000000..31968.750000 -)
     * Scale: 31.25
     * Offset: 1000.0
     */
    uint16_t ntc1_resistance;

    /**
     * Range: -32..991 (0.000000..31968.750000 -)
     * Scale: 31.25
     * Offset: 1000.0
     */
    uint16_t ntc2_resistance;

    /**
     * Range: -32..991 (0.000000..31968.750000 -)
     * Scale: 31.25
     * Offset: 1000.0
     */
    uint16_t ntc3_resistance;

    /**
     * Range: -32..991 (0.000000..31968.750000 -)
     * Scale: 31.25
     * Offset: 1000.0
     */
    uint16_t ntc4_resistance;

    /**
     * Range: -32..991 (0.000000..31968.750000 -)
     * Scale: 31.25
     * Offset: 1000.0
     */
    uint16_t ntc5_resistance;

    /**
     * Range: -32..991 (0.000000..31968.750000 -)
     * Scale: 31.25
     * Offset: 1000.0
     */
    uint16_t ntc6_resistance;
};

/**
 * Signals in message BMSLV_CellVoltage1.
 *
 * All signal values are as on the CAN bus.
 */
struct sc22_evo_canlv_bmslv_cell_voltage1_t {
    /**
     * Range: -52631.57894736842105263157895..12903.42105263157894736842105 (0.000000..2490.330000 -)
     * Scale: 0.038
     * Offset: 2000.0
     */
    uint16_t cell_1_voltage_m_v;

    /**
     * Range: -52631.57894736842105263157895..12903.42105263157894736842105 (0.000000..2490.330000 -)
     * Scale: 0.038
     * Offset: 2000.0
     */
    uint16_t cell_2_voltage_m_v;

    /**
     * Range: -52631.57894736842105263157895..12903.42105263157894736842105 (0.000000..2490.330000 -)
     * Scale: 0.038
     * Offset: 2000.0
     */
    uint16_t cell_3_voltage_m_v;

    /**
     * Range: -52631.57894736842105263157895..12903.42105263157894736842105 (0.000000..2490.330000 -)
     * Scale: 0.038
     * Offset: 2000.0
     */
    uint16_t cell_4_voltage_m_v;
};

/**
 * Signals in message BMSLV_CellVoltage2.
 *
 * All signal values are as on the CAN bus.
 */
struct sc22_evo_canlv_bmslv_cell_voltage2_t {
    /**
     * Range: -52631.57894736842105263157895..12903.42105263157894736842105 (0.000000..2490.330000 -)
     * Scale: 0.038
     * Offset: 2000.0
     */
    uint16_t cell_5_voltage_m_v;

    /**
     * Range: -52631.57894736842105263157895..12903.42105263157894736842105 (0.000000..2490.330000 -)
     * Scale: 0.038
     * Offset: 2000.0
     */
    uint16_t cell_6_voltage_m_v;

    /**
     * Range: 0..65535 (0.000000..65535.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t cell_7_voltage_m_v;
};

/**
 * Signals in message BMSLV_BatteryPackGeneral.
 *
 * All signal values are as on the CAN bus.
 */
struct sc22_evo_canlv_bmslv_battery_pack_general_t {
    /**
     * Range: 0..65535 (0.000000..4980.660000 -)
     * Scale: 0.076
     * Offset: 0.0
     */
    uint16_t current_sensor_voltage;

    /**
     * Range: -52434.45692883895131086142322..13100.54307116104868913857678 (0.000000..17497.845000 -)
     * Scale: 0.267
     * Offset: 14000.0
     */
    uint16_t lv_total_voltage_m_v;
};

/**
 * Signals in message BMSLV_Status.
 *
 * All signal values are as on the CAN bus.
 */
struct sc22_evo_canlv_bmslv_status_t {
    /**
     * Range: 0..1 (0.000000..1.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    int8_t is_relay_open;

    /**
     * Range: 0..255 (0.000000..255.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t bmslv_status_message;
};

/**
 * Signals in message Sens_Front_1.
 *
 * All signal values are as on the CAN bus.
 */
struct sc22_evo_canlv_sens_front_1_t {
    /**
     * Range: 0..65535 (0.000000..65535.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t throttle_0_voltage_m_v;

    /**
     * Range: 0..65535 (0.000000..65535.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t throttle_1_voltage_m_v;

    /**
     * Range: 0..65535 (0.000000..65535.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t steering_voltage_m_v;

    /**
     * Range: 0..65535 (0.000000..65535.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t brake_straingauge_voltage_m_v;
};

/**
 * Signals in message Sens_Front_2.
 *
 * All signal values are as on the CAN bus.
 */
struct sc22_evo_canlv_sens_front_2_t {
    /**
     * Range: 0..65535 (0.000000..65535.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t pot_fl_voltage_m_v;

    /**
     * Range: 0..65535 (0.000000..65535.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t pot_fr_voltage_m_v;

    /**
     * Range: 0..65535 (0.000000..65535.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t brake_pressure_voltage_m_v;
};

/**
 * Signals in message Sens_Front_3.
 *
 * All signal values are as on the CAN bus.
 */
struct sc22_evo_canlv_sens_front_3_t {
    /**
     * Range: 0..65535 (0.000000..65535.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t straingauge_push_fr_voltage_m_v;

    /**
     * Range: 0..65535 (0.000000..65535.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t straingauge_tie_fr_voltage_m_v;

    /**
     * Range: 0..65535 (0.000000..65535.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t straingauge_push_fl_voltage_m_v;

    /**
     * Range: 0..65535 (0.000000..65535.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t straingauge_tie_fl_voltage_m_v;
};

/**
 * Signals in message Sens_Front_ShutdownStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct sc22_evo_canlv_sens_front_shutdown_status_t {
    /**
     * Range: 0..1 (0.000000..1.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    int8_t is_shut_closed_pre_inertia;

    /**
     * Range: 0..1 (0.000000..1.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    int8_t is_shut_closed_post_inertia;

    /**
     * Range: 0..1 (0.000000..1.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    int8_t is_shut_closed_post_bots;

    /**
     * Range: 0..1 (0.000000..1.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    int8_t is_shut_closed_post_cockpit;
};

/**
 * Signals in message Sens_Front_NTC.
 *
 * All signal values are as on the CAN bus.
 */
struct sc22_evo_canlv_sens_front_ntc_t {
    /**
     * Range: 0..1023 (0.000000..1023.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t ntc_resistance;

    /**
     * Range: 0..1023 (0.000000..1023.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t ntc_2_resistance;

    /**
     * Range: 0..1023 (0.000000..1023.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t ntc_3_resistance;

    /**
     * Range: 0..1023 (0.000000..1023.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t ntc_4_resistance;

    /**
     * Range: 0..1023 (0.000000..1023.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t ntc_spare1_resistance;

    /**
     * Range: 0..1023 (0.000000..1023.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t ntc_spare2_resistance;
};

/**
 * Signals in message Sens_Rear_1.
 *
 * All signal values are as on the CAN bus.
 */
struct sc22_evo_canlv_sens_rear_1_t {
    /**
     * Range: 0..65535 (0.000000..65535.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t pot_rl_voltage_m_v;

    /**
     * Range: 0..65535 (0.000000..65535.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t pot_rr_voltage_rr;

    /**
     * Range: 0..65535 (0.000000..65535.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t brake_pressure_rear_voltage_m_v;
};

/**
 * Signals in message Sens_Rear_3.
 *
 * All signal values are as on the CAN bus.
 */
struct sc22_evo_canlv_sens_rear_3_t {
    /**
     * Range: 0..65535 (0.000000..65535.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t straingauge_push_rr_voltage_m_v;

    /**
     * Range: 0..65535 (0.000000..65535.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t straingauge_tie_rr_voltage_m_v;

    /**
     * Range: 0..65535 (0.000000..65535.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t straingauge_push_rl_voltage_m_v;

    /**
     * Range: 0..65535 (0.000000..65535.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t straingauge_tie_rl_voltage_m_v;
};

/**
 * Signals in message Sens_Rear_2.
 *
 * All signal values are as on the CAN bus.
 */
struct sc22_evo_canlv_sens_rear_2_t {
    /**
     * Range: 0..65535 (0.000000..65535.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t cooling_pressure_dx_voltage_m_v;

    /**
     * Range: 0..65535 (0.000000..65535.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t cooling_pressure_sx_voltage_m_v;
};

/**
 * Signals in message Sens_Rear_NTC.
 *
 * All signal values are as on the CAN bus.
 */
struct sc22_evo_canlv_sens_rear_ntc_t {
    /**
     * Range: 0..1023 (0.000000..1023.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t ntc_1_resistance;

    /**
     * Range: 0..1023 (0.000000..1023.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t ntc_2_resistance;

    /**
     * Range: 0..1023 (0.000000..1023.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t ntc_3_resistance;

    /**
     * Range: 0..1023 (0.000000..1023.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t ntc_4_resistance;

    /**
     * Range: 0..1023 (0.000000..1023.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t ntc_5_resistance;

    /**
     * Range: 0..1023 (0.000000..1023.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint16_t ntc_6_resistance;
};

/**
 * Signals in message Sens_Rear_ShutdownStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct sc22_evo_canlv_sens_rear_shutdown_status_t {
    /**
     * Range: 0..1 (0.000000..1.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    int8_t is_shut_closed_post_bspd;

    /**
     * Range: 0..1 (0.000000..1.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    int8_t is_shut_closed_pre_funghi;

    /**
     * Range: 0..1 (0.000000..1.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    int8_t is_shut_closed_post_inv_mono;

    /**
     * Range: 0..1 (0.000000..1.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    int8_t is_shut_closed_post_inv_fr;

    /**
     * Range: 0..1 (0.000000..1.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    int8_t is_bsp_din_error;
};

/**
 * Signals in message TLB_Battery_TSALStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct sc22_evo_canlv_tlb_battery_tsal_status_t {
    /**
     * Range: 0..1 (0.000000..1.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    int8_t tsal_is_green_on;

    /**
     * Range: 0..1 (0.000000..1.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    int8_t tsal_is_air_pos_closed;

    /**
     * Range: 0..1 (0.000000..1.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    int8_t tsal_is_air_neg_closed;

    /**
     * Range: 0..1 (0.000000..1.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    int8_t tsal_is_relay_precharge_closed;

    /**
     * Range: 0..1 (0.000000..1.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    int8_t tsal_is_dc_bus_over60_v;

    /**
     * Range: 0..1 (0.000000..1.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    int8_t intentional_state_air_pos;

    /**
     * Range: 0..1 (0.000000..1.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    int8_t intentional_state_air_neg;

    /**
     * Range: 0..1 (0.000000..1.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    int8_t intentional_state_relay_precharge;

    /**
     * Range: 0..1 (0.000000..1.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    int8_t scs_short2_gnd_air_pos;

    /**
     * Range: 0..1 (0.000000..1.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    int8_t scs_short2_gnd_air_neg;

    /**
     * Range: 0..1 (0.000000..1.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    int8_t scs_is_any_short2_gnd_present;

    /**
     * Range: 0..1 (0.000000..1.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    int8_t implausibility_is_any_imp_present;

    /**
     * Range: 0..1 (0.000000..1.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    int8_t implausibility_is_air_pos_imp_present;

    /**
     * Range: 0..1 (0.000000..1.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    int8_t implausibility_is_air_neg_imp_present;

    /**
     * Range: 0..1 (0.000000..1.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    int8_t implausibility_is_relay_precharge_imp_present;

    /**
     * Range: 0..1 (0.000000..1.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    int8_t implausibility_is_dc_bus_voltage_imp_present;

    /**
     * Range: 0..1 (0.000000..1.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    int8_t implausibility_is_any_imp_latched;
};

/**
 * Signals in message TLB_Battery_ShutStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct sc22_evo_canlv_tlb_battery_shut_status_t {
    /**
     * Range: 0..1 (0.000000..1.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    int8_t is_shut_closed_pre_ams_imd_latch;

    /**
     * Range: 0..1 (0.000000..1.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    int8_t is_shut_closed_post_ams_latch;

    /**
     * Range: 0..1 (0.000000..1.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    int8_t is_shut_closed_post_imd_latch;

    /**
     * Range: 0..1 (0.000000..1.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    int8_t is_shutdown_closed_pre_tlb_batt_final;

    /**
     * Range: 0..1 (0.000000..1.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    int8_t is_ams_error_latched;

    /**
     * Range: 0..1 (0.000000..1.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    int8_t is_imd_error_latched;

    /**
     * Range: 0..255 (0.000000..255.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t shutdown_adc_post_sd_precharge_relay;

    /**
     * Range: 0..255 (0.000000..255.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t shutdown_adc_ai_rs_opening_delay_capacitors;
};

/**
 * Signals in message dSpace_PeripheralsCTRL.
 *
 * All signal values are as on the CAN bus.
 */
struct sc22_evo_canlv_d_space_peripherals_ctrl_t {
    /**
     * Range: 0..1 (0.000000..1.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    int8_t brake_light_on_ctrl;

    /**
     * Range: 0..255 (0.000000..255.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t rad_fan_pwm_ctrl;

    /**
     * Range: 0..255 (0.000000..255.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t batt_hv_fan_ctrl;
};

/**
 * Signals in message dSpace_RTD_ACK.
 *
 * All signal values are as on the CAN bus.
 */
struct sc22_evo_canlv_d_space_rtd_ack_t {
    /**
     * Range: 0..1 (0.000000..1.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    int8_t ctor_en_ack;

    /**
     * Range: 0..1 (0.000000..1.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    int8_t rtd_en_ack;

    /**
     * Range: 0..1 (0.000000..1.000000 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    int8_t reboot_fsm;
};

/**
 * Pack message Steering_RTD.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc22_evo_canlv_steering_rtd_pack(
    uint8_t *dst_p,
    const struct sc22_evo_canlv_steering_rtd_t *src_p,
    size_t size);

/**
 * Unpack message Steering_RTD.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc22_evo_canlv_steering_rtd_unpack(
    struct sc22_evo_canlv_steering_rtd_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc22_evo_canlv_steering_rtd_rtd_cmd_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_steering_rtd_rtd_cmd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_steering_rtd_rtd_cmd_is_in_range(uint8_t value);

/**
 * Pack message Steering_MotorControl_Debug.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc22_evo_canlv_steering_motor_control_debug_pack(
    uint8_t *dst_p,
    const struct sc22_evo_canlv_steering_motor_control_debug_t *src_p,
    size_t size);

/**
 * Unpack message Steering_MotorControl_Debug.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc22_evo_canlv_steering_motor_control_debug_unpack(
    struct sc22_evo_canlv_steering_motor_control_debug_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t sc22_evo_canlv_steering_motor_control_debug_front_left_on_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_steering_motor_control_debug_front_left_on_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_steering_motor_control_debug_front_left_on_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t sc22_evo_canlv_steering_motor_control_debug_front_right_on_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_steering_motor_control_debug_front_right_on_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_steering_motor_control_debug_front_right_on_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t sc22_evo_canlv_steering_motor_control_debug_rear_left_on_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_steering_motor_control_debug_rear_left_on_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_steering_motor_control_debug_rear_left_on_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t sc22_evo_canlv_steering_motor_control_debug_rear_right_on_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_steering_motor_control_debug_rear_right_on_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_steering_motor_control_debug_rear_right_on_is_in_range(int8_t value);

/**
 * Pack message BMSLV_Temp.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc22_evo_canlv_bmslv_temp_pack(
    uint8_t *dst_p,
    const struct sc22_evo_canlv_bmslv_temp_t *src_p,
    size_t size);

/**
 * Unpack message BMSLV_Temp.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc22_evo_canlv_bmslv_temp_unpack(
    struct sc22_evo_canlv_bmslv_temp_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t sc22_evo_canlv_bmslv_temp_ntc_is_first_message_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_bmslv_temp_ntc_is_first_message_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_bmslv_temp_ntc_is_first_message_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_bmslv_temp_ntc1_resistance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_bmslv_temp_ntc1_resistance_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_bmslv_temp_ntc1_resistance_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_bmslv_temp_ntc2_resistance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_bmslv_temp_ntc2_resistance_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_bmslv_temp_ntc2_resistance_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_bmslv_temp_ntc3_resistance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_bmslv_temp_ntc3_resistance_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_bmslv_temp_ntc3_resistance_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_bmslv_temp_ntc4_resistance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_bmslv_temp_ntc4_resistance_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_bmslv_temp_ntc4_resistance_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_bmslv_temp_ntc5_resistance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_bmslv_temp_ntc5_resistance_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_bmslv_temp_ntc5_resistance_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_bmslv_temp_ntc6_resistance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_bmslv_temp_ntc6_resistance_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_bmslv_temp_ntc6_resistance_is_in_range(uint16_t value);

/**
 * Pack message BMSLV_CellVoltage1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc22_evo_canlv_bmslv_cell_voltage1_pack(
    uint8_t *dst_p,
    const struct sc22_evo_canlv_bmslv_cell_voltage1_t *src_p,
    size_t size);

/**
 * Unpack message BMSLV_CellVoltage1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc22_evo_canlv_bmslv_cell_voltage1_unpack(
    struct sc22_evo_canlv_bmslv_cell_voltage1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_bmslv_cell_voltage1_cell_1_voltage_m_v_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_bmslv_cell_voltage1_cell_1_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_bmslv_cell_voltage1_cell_1_voltage_m_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_bmslv_cell_voltage1_cell_2_voltage_m_v_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_bmslv_cell_voltage1_cell_2_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_bmslv_cell_voltage1_cell_2_voltage_m_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_bmslv_cell_voltage1_cell_3_voltage_m_v_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_bmslv_cell_voltage1_cell_3_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_bmslv_cell_voltage1_cell_3_voltage_m_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_bmslv_cell_voltage1_cell_4_voltage_m_v_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_bmslv_cell_voltage1_cell_4_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_bmslv_cell_voltage1_cell_4_voltage_m_v_is_in_range(uint16_t value);

/**
 * Pack message BMSLV_CellVoltage2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc22_evo_canlv_bmslv_cell_voltage2_pack(
    uint8_t *dst_p,
    const struct sc22_evo_canlv_bmslv_cell_voltage2_t *src_p,
    size_t size);

/**
 * Unpack message BMSLV_CellVoltage2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc22_evo_canlv_bmslv_cell_voltage2_unpack(
    struct sc22_evo_canlv_bmslv_cell_voltage2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_bmslv_cell_voltage2_cell_5_voltage_m_v_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_bmslv_cell_voltage2_cell_5_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_bmslv_cell_voltage2_cell_5_voltage_m_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_bmslv_cell_voltage2_cell_6_voltage_m_v_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_bmslv_cell_voltage2_cell_6_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_bmslv_cell_voltage2_cell_6_voltage_m_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_bmslv_cell_voltage2_cell_7_voltage_m_v_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_bmslv_cell_voltage2_cell_7_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_bmslv_cell_voltage2_cell_7_voltage_m_v_is_in_range(uint16_t value);

/**
 * Pack message BMSLV_BatteryPackGeneral.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc22_evo_canlv_bmslv_battery_pack_general_pack(
    uint8_t *dst_p,
    const struct sc22_evo_canlv_bmslv_battery_pack_general_t *src_p,
    size_t size);

/**
 * Unpack message BMSLV_BatteryPackGeneral.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc22_evo_canlv_bmslv_battery_pack_general_unpack(
    struct sc22_evo_canlv_bmslv_battery_pack_general_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_bmslv_battery_pack_general_current_sensor_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_bmslv_battery_pack_general_current_sensor_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_bmslv_battery_pack_general_current_sensor_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_bmslv_battery_pack_general_lv_total_voltage_m_v_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_bmslv_battery_pack_general_lv_total_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_bmslv_battery_pack_general_lv_total_voltage_m_v_is_in_range(uint16_t value);

/**
 * Pack message BMSLV_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc22_evo_canlv_bmslv_status_pack(
    uint8_t *dst_p,
    const struct sc22_evo_canlv_bmslv_status_t *src_p,
    size_t size);

/**
 * Unpack message BMSLV_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc22_evo_canlv_bmslv_status_unpack(
    struct sc22_evo_canlv_bmslv_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t sc22_evo_canlv_bmslv_status_is_relay_open_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_bmslv_status_is_relay_open_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_bmslv_status_is_relay_open_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc22_evo_canlv_bmslv_status_bmslv_status_message_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_bmslv_status_bmslv_status_message_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_bmslv_status_bmslv_status_message_is_in_range(uint8_t value);

/**
 * Pack message Sens_Front_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc22_evo_canlv_sens_front_1_pack(
    uint8_t *dst_p,
    const struct sc22_evo_canlv_sens_front_1_t *src_p,
    size_t size);

/**
 * Unpack message Sens_Front_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc22_evo_canlv_sens_front_1_unpack(
    struct sc22_evo_canlv_sens_front_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_sens_front_1_throttle_0_voltage_m_v_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_sens_front_1_throttle_0_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_sens_front_1_throttle_0_voltage_m_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_sens_front_1_throttle_1_voltage_m_v_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_sens_front_1_throttle_1_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_sens_front_1_throttle_1_voltage_m_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_sens_front_1_steering_voltage_m_v_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_sens_front_1_steering_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_sens_front_1_steering_voltage_m_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_sens_front_1_brake_straingauge_voltage_m_v_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_sens_front_1_brake_straingauge_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_sens_front_1_brake_straingauge_voltage_m_v_is_in_range(uint16_t value);

/**
 * Pack message Sens_Front_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc22_evo_canlv_sens_front_2_pack(
    uint8_t *dst_p,
    const struct sc22_evo_canlv_sens_front_2_t *src_p,
    size_t size);

/**
 * Unpack message Sens_Front_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc22_evo_canlv_sens_front_2_unpack(
    struct sc22_evo_canlv_sens_front_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_sens_front_2_pot_fl_voltage_m_v_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_sens_front_2_pot_fl_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_sens_front_2_pot_fl_voltage_m_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_sens_front_2_pot_fr_voltage_m_v_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_sens_front_2_pot_fr_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_sens_front_2_pot_fr_voltage_m_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_sens_front_2_brake_pressure_voltage_m_v_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_sens_front_2_brake_pressure_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_sens_front_2_brake_pressure_voltage_m_v_is_in_range(uint16_t value);

/**
 * Pack message Sens_Front_3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc22_evo_canlv_sens_front_3_pack(
    uint8_t *dst_p,
    const struct sc22_evo_canlv_sens_front_3_t *src_p,
    size_t size);

/**
 * Unpack message Sens_Front_3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc22_evo_canlv_sens_front_3_unpack(
    struct sc22_evo_canlv_sens_front_3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_sens_front_3_straingauge_push_fr_voltage_m_v_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_sens_front_3_straingauge_push_fr_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_sens_front_3_straingauge_push_fr_voltage_m_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_sens_front_3_straingauge_tie_fr_voltage_m_v_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_sens_front_3_straingauge_tie_fr_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_sens_front_3_straingauge_tie_fr_voltage_m_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_sens_front_3_straingauge_push_fl_voltage_m_v_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_sens_front_3_straingauge_push_fl_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_sens_front_3_straingauge_push_fl_voltage_m_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_sens_front_3_straingauge_tie_fl_voltage_m_v_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_sens_front_3_straingauge_tie_fl_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_sens_front_3_straingauge_tie_fl_voltage_m_v_is_in_range(uint16_t value);

/**
 * Pack message Sens_Front_ShutdownStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc22_evo_canlv_sens_front_shutdown_status_pack(
    uint8_t *dst_p,
    const struct sc22_evo_canlv_sens_front_shutdown_status_t *src_p,
    size_t size);

/**
 * Unpack message Sens_Front_ShutdownStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc22_evo_canlv_sens_front_shutdown_status_unpack(
    struct sc22_evo_canlv_sens_front_shutdown_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t sc22_evo_canlv_sens_front_shutdown_status_is_shut_closed_pre_inertia_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_sens_front_shutdown_status_is_shut_closed_pre_inertia_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_sens_front_shutdown_status_is_shut_closed_pre_inertia_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t sc22_evo_canlv_sens_front_shutdown_status_is_shut_closed_post_inertia_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_sens_front_shutdown_status_is_shut_closed_post_inertia_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_sens_front_shutdown_status_is_shut_closed_post_inertia_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t sc22_evo_canlv_sens_front_shutdown_status_is_shut_closed_post_bots_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_sens_front_shutdown_status_is_shut_closed_post_bots_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_sens_front_shutdown_status_is_shut_closed_post_bots_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t sc22_evo_canlv_sens_front_shutdown_status_is_shut_closed_post_cockpit_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_sens_front_shutdown_status_is_shut_closed_post_cockpit_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_sens_front_shutdown_status_is_shut_closed_post_cockpit_is_in_range(int8_t value);

/**
 * Pack message Sens_Front_NTC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc22_evo_canlv_sens_front_ntc_pack(
    uint8_t *dst_p,
    const struct sc22_evo_canlv_sens_front_ntc_t *src_p,
    size_t size);

/**
 * Unpack message Sens_Front_NTC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc22_evo_canlv_sens_front_ntc_unpack(
    struct sc22_evo_canlv_sens_front_ntc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_sens_front_ntc_ntc_resistance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_sens_front_ntc_ntc_resistance_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_sens_front_ntc_ntc_resistance_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_sens_front_ntc_ntc_2_resistance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_sens_front_ntc_ntc_2_resistance_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_sens_front_ntc_ntc_2_resistance_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_sens_front_ntc_ntc_3_resistance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_sens_front_ntc_ntc_3_resistance_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_sens_front_ntc_ntc_3_resistance_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_sens_front_ntc_ntc_4_resistance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_sens_front_ntc_ntc_4_resistance_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_sens_front_ntc_ntc_4_resistance_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_sens_front_ntc_ntc_spare1_resistance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_sens_front_ntc_ntc_spare1_resistance_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_sens_front_ntc_ntc_spare1_resistance_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_sens_front_ntc_ntc_spare2_resistance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_sens_front_ntc_ntc_spare2_resistance_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_sens_front_ntc_ntc_spare2_resistance_is_in_range(uint16_t value);

/**
 * Pack message Sens_Rear_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc22_evo_canlv_sens_rear_1_pack(
    uint8_t *dst_p,
    const struct sc22_evo_canlv_sens_rear_1_t *src_p,
    size_t size);

/**
 * Unpack message Sens_Rear_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc22_evo_canlv_sens_rear_1_unpack(
    struct sc22_evo_canlv_sens_rear_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_sens_rear_1_pot_rl_voltage_m_v_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_sens_rear_1_pot_rl_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_sens_rear_1_pot_rl_voltage_m_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_sens_rear_1_pot_rr_voltage_rr_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_sens_rear_1_pot_rr_voltage_rr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_sens_rear_1_pot_rr_voltage_rr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_sens_rear_1_brake_pressure_rear_voltage_m_v_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_sens_rear_1_brake_pressure_rear_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_sens_rear_1_brake_pressure_rear_voltage_m_v_is_in_range(uint16_t value);

/**
 * Pack message Sens_Rear_3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc22_evo_canlv_sens_rear_3_pack(
    uint8_t *dst_p,
    const struct sc22_evo_canlv_sens_rear_3_t *src_p,
    size_t size);

/**
 * Unpack message Sens_Rear_3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc22_evo_canlv_sens_rear_3_unpack(
    struct sc22_evo_canlv_sens_rear_3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_sens_rear_3_straingauge_push_rr_voltage_m_v_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_sens_rear_3_straingauge_push_rr_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_sens_rear_3_straingauge_push_rr_voltage_m_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_sens_rear_3_straingauge_tie_rr_voltage_m_v_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_sens_rear_3_straingauge_tie_rr_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_sens_rear_3_straingauge_tie_rr_voltage_m_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_sens_rear_3_straingauge_push_rl_voltage_m_v_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_sens_rear_3_straingauge_push_rl_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_sens_rear_3_straingauge_push_rl_voltage_m_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_sens_rear_3_straingauge_tie_rl_voltage_m_v_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_sens_rear_3_straingauge_tie_rl_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_sens_rear_3_straingauge_tie_rl_voltage_m_v_is_in_range(uint16_t value);

/**
 * Pack message Sens_Rear_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc22_evo_canlv_sens_rear_2_pack(
    uint8_t *dst_p,
    const struct sc22_evo_canlv_sens_rear_2_t *src_p,
    size_t size);

/**
 * Unpack message Sens_Rear_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc22_evo_canlv_sens_rear_2_unpack(
    struct sc22_evo_canlv_sens_rear_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_sens_rear_2_cooling_pressure_dx_voltage_m_v_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_sens_rear_2_cooling_pressure_dx_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_sens_rear_2_cooling_pressure_dx_voltage_m_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_sens_rear_2_cooling_pressure_sx_voltage_m_v_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_sens_rear_2_cooling_pressure_sx_voltage_m_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_sens_rear_2_cooling_pressure_sx_voltage_m_v_is_in_range(uint16_t value);

/**
 * Pack message Sens_Rear_NTC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc22_evo_canlv_sens_rear_ntc_pack(
    uint8_t *dst_p,
    const struct sc22_evo_canlv_sens_rear_ntc_t *src_p,
    size_t size);

/**
 * Unpack message Sens_Rear_NTC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc22_evo_canlv_sens_rear_ntc_unpack(
    struct sc22_evo_canlv_sens_rear_ntc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_sens_rear_ntc_ntc_1_resistance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_sens_rear_ntc_ntc_1_resistance_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_sens_rear_ntc_ntc_1_resistance_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_sens_rear_ntc_ntc_2_resistance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_sens_rear_ntc_ntc_2_resistance_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_sens_rear_ntc_ntc_2_resistance_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_sens_rear_ntc_ntc_3_resistance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_sens_rear_ntc_ntc_3_resistance_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_sens_rear_ntc_ntc_3_resistance_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_sens_rear_ntc_ntc_4_resistance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_sens_rear_ntc_ntc_4_resistance_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_sens_rear_ntc_ntc_4_resistance_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_sens_rear_ntc_ntc_5_resistance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_sens_rear_ntc_ntc_5_resistance_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_sens_rear_ntc_ntc_5_resistance_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc22_evo_canlv_sens_rear_ntc_ntc_6_resistance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_sens_rear_ntc_ntc_6_resistance_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_sens_rear_ntc_ntc_6_resistance_is_in_range(uint16_t value);

/**
 * Pack message Sens_Rear_ShutdownStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc22_evo_canlv_sens_rear_shutdown_status_pack(
    uint8_t *dst_p,
    const struct sc22_evo_canlv_sens_rear_shutdown_status_t *src_p,
    size_t size);

/**
 * Unpack message Sens_Rear_ShutdownStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc22_evo_canlv_sens_rear_shutdown_status_unpack(
    struct sc22_evo_canlv_sens_rear_shutdown_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t sc22_evo_canlv_sens_rear_shutdown_status_is_shut_closed_post_bspd_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_sens_rear_shutdown_status_is_shut_closed_post_bspd_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_sens_rear_shutdown_status_is_shut_closed_post_bspd_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t sc22_evo_canlv_sens_rear_shutdown_status_is_shut_closed_pre_funghi_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_sens_rear_shutdown_status_is_shut_closed_pre_funghi_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_sens_rear_shutdown_status_is_shut_closed_pre_funghi_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t sc22_evo_canlv_sens_rear_shutdown_status_is_shut_closed_post_inv_mono_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_sens_rear_shutdown_status_is_shut_closed_post_inv_mono_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_sens_rear_shutdown_status_is_shut_closed_post_inv_mono_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t sc22_evo_canlv_sens_rear_shutdown_status_is_shut_closed_post_inv_fr_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_sens_rear_shutdown_status_is_shut_closed_post_inv_fr_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_sens_rear_shutdown_status_is_shut_closed_post_inv_fr_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t sc22_evo_canlv_sens_rear_shutdown_status_is_bsp_din_error_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_sens_rear_shutdown_status_is_bsp_din_error_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_sens_rear_shutdown_status_is_bsp_din_error_is_in_range(int8_t value);

/**
 * Pack message TLB_Battery_TSALStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc22_evo_canlv_tlb_battery_tsal_status_pack(
    uint8_t *dst_p,
    const struct sc22_evo_canlv_tlb_battery_tsal_status_t *src_p,
    size_t size);

/**
 * Unpack message TLB_Battery_TSALStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc22_evo_canlv_tlb_battery_tsal_status_unpack(
    struct sc22_evo_canlv_tlb_battery_tsal_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t sc22_evo_canlv_tlb_battery_tsal_status_tsal_is_green_on_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_tlb_battery_tsal_status_tsal_is_green_on_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_tlb_battery_tsal_status_tsal_is_green_on_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t sc22_evo_canlv_tlb_battery_tsal_status_tsal_is_air_pos_closed_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_tlb_battery_tsal_status_tsal_is_air_pos_closed_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_tlb_battery_tsal_status_tsal_is_air_pos_closed_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t sc22_evo_canlv_tlb_battery_tsal_status_tsal_is_air_neg_closed_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_tlb_battery_tsal_status_tsal_is_air_neg_closed_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_tlb_battery_tsal_status_tsal_is_air_neg_closed_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t sc22_evo_canlv_tlb_battery_tsal_status_tsal_is_relay_precharge_closed_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_tlb_battery_tsal_status_tsal_is_relay_precharge_closed_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_tlb_battery_tsal_status_tsal_is_relay_precharge_closed_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t sc22_evo_canlv_tlb_battery_tsal_status_tsal_is_dc_bus_over60_v_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_tlb_battery_tsal_status_tsal_is_dc_bus_over60_v_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_tlb_battery_tsal_status_tsal_is_dc_bus_over60_v_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t sc22_evo_canlv_tlb_battery_tsal_status_intentional_state_air_pos_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_tlb_battery_tsal_status_intentional_state_air_pos_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_tlb_battery_tsal_status_intentional_state_air_pos_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t sc22_evo_canlv_tlb_battery_tsal_status_intentional_state_air_neg_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_tlb_battery_tsal_status_intentional_state_air_neg_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_tlb_battery_tsal_status_intentional_state_air_neg_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t sc22_evo_canlv_tlb_battery_tsal_status_intentional_state_relay_precharge_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_tlb_battery_tsal_status_intentional_state_relay_precharge_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_tlb_battery_tsal_status_intentional_state_relay_precharge_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t sc22_evo_canlv_tlb_battery_tsal_status_scs_short2_gnd_air_pos_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_tlb_battery_tsal_status_scs_short2_gnd_air_pos_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_tlb_battery_tsal_status_scs_short2_gnd_air_pos_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t sc22_evo_canlv_tlb_battery_tsal_status_scs_short2_gnd_air_neg_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_tlb_battery_tsal_status_scs_short2_gnd_air_neg_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_tlb_battery_tsal_status_scs_short2_gnd_air_neg_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t sc22_evo_canlv_tlb_battery_tsal_status_scs_is_any_short2_gnd_present_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_tlb_battery_tsal_status_scs_is_any_short2_gnd_present_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_tlb_battery_tsal_status_scs_is_any_short2_gnd_present_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t sc22_evo_canlv_tlb_battery_tsal_status_implausibility_is_any_imp_present_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_tlb_battery_tsal_status_implausibility_is_any_imp_present_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_tlb_battery_tsal_status_implausibility_is_any_imp_present_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t sc22_evo_canlv_tlb_battery_tsal_status_implausibility_is_air_pos_imp_present_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_tlb_battery_tsal_status_implausibility_is_air_pos_imp_present_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_tlb_battery_tsal_status_implausibility_is_air_pos_imp_present_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t sc22_evo_canlv_tlb_battery_tsal_status_implausibility_is_air_neg_imp_present_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_tlb_battery_tsal_status_implausibility_is_air_neg_imp_present_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_tlb_battery_tsal_status_implausibility_is_air_neg_imp_present_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t sc22_evo_canlv_tlb_battery_tsal_status_implausibility_is_relay_precharge_imp_present_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_tlb_battery_tsal_status_implausibility_is_relay_precharge_imp_present_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_tlb_battery_tsal_status_implausibility_is_relay_precharge_imp_present_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t sc22_evo_canlv_tlb_battery_tsal_status_implausibility_is_dc_bus_voltage_imp_present_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_tlb_battery_tsal_status_implausibility_is_dc_bus_voltage_imp_present_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_tlb_battery_tsal_status_implausibility_is_dc_bus_voltage_imp_present_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t sc22_evo_canlv_tlb_battery_tsal_status_implausibility_is_any_imp_latched_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_tlb_battery_tsal_status_implausibility_is_any_imp_latched_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_tlb_battery_tsal_status_implausibility_is_any_imp_latched_is_in_range(int8_t value);

/**
 * Pack message TLB_Battery_ShutStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc22_evo_canlv_tlb_battery_shut_status_pack(
    uint8_t *dst_p,
    const struct sc22_evo_canlv_tlb_battery_shut_status_t *src_p,
    size_t size);

/**
 * Unpack message TLB_Battery_ShutStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc22_evo_canlv_tlb_battery_shut_status_unpack(
    struct sc22_evo_canlv_tlb_battery_shut_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t sc22_evo_canlv_tlb_battery_shut_status_is_shut_closed_pre_ams_imd_latch_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_tlb_battery_shut_status_is_shut_closed_pre_ams_imd_latch_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_tlb_battery_shut_status_is_shut_closed_pre_ams_imd_latch_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t sc22_evo_canlv_tlb_battery_shut_status_is_shut_closed_post_ams_latch_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_tlb_battery_shut_status_is_shut_closed_post_ams_latch_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_tlb_battery_shut_status_is_shut_closed_post_ams_latch_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t sc22_evo_canlv_tlb_battery_shut_status_is_shut_closed_post_imd_latch_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_tlb_battery_shut_status_is_shut_closed_post_imd_latch_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_tlb_battery_shut_status_is_shut_closed_post_imd_latch_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t sc22_evo_canlv_tlb_battery_shut_status_is_shutdown_closed_pre_tlb_batt_final_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_tlb_battery_shut_status_is_shutdown_closed_pre_tlb_batt_final_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_tlb_battery_shut_status_is_shutdown_closed_pre_tlb_batt_final_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t sc22_evo_canlv_tlb_battery_shut_status_is_ams_error_latched_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_tlb_battery_shut_status_is_ams_error_latched_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_tlb_battery_shut_status_is_ams_error_latched_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t sc22_evo_canlv_tlb_battery_shut_status_is_imd_error_latched_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_tlb_battery_shut_status_is_imd_error_latched_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_tlb_battery_shut_status_is_imd_error_latched_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc22_evo_canlv_tlb_battery_shut_status_shutdown_adc_post_sd_precharge_relay_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_tlb_battery_shut_status_shutdown_adc_post_sd_precharge_relay_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_tlb_battery_shut_status_shutdown_adc_post_sd_precharge_relay_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc22_evo_canlv_tlb_battery_shut_status_shutdown_adc_ai_rs_opening_delay_capacitors_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_tlb_battery_shut_status_shutdown_adc_ai_rs_opening_delay_capacitors_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_tlb_battery_shut_status_shutdown_adc_ai_rs_opening_delay_capacitors_is_in_range(uint8_t value);

/**
 * Pack message dSpace_PeripheralsCTRL.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc22_evo_canlv_d_space_peripherals_ctrl_pack(
    uint8_t *dst_p,
    const struct sc22_evo_canlv_d_space_peripherals_ctrl_t *src_p,
    size_t size);

/**
 * Unpack message dSpace_PeripheralsCTRL.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc22_evo_canlv_d_space_peripherals_ctrl_unpack(
    struct sc22_evo_canlv_d_space_peripherals_ctrl_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t sc22_evo_canlv_d_space_peripherals_ctrl_brake_light_on_ctrl_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_d_space_peripherals_ctrl_brake_light_on_ctrl_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_d_space_peripherals_ctrl_brake_light_on_ctrl_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc22_evo_canlv_d_space_peripherals_ctrl_rad_fan_pwm_ctrl_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_d_space_peripherals_ctrl_rad_fan_pwm_ctrl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_d_space_peripherals_ctrl_rad_fan_pwm_ctrl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc22_evo_canlv_d_space_peripherals_ctrl_batt_hv_fan_ctrl_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_d_space_peripherals_ctrl_batt_hv_fan_ctrl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_d_space_peripherals_ctrl_batt_hv_fan_ctrl_is_in_range(uint8_t value);

/**
 * Pack message dSpace_RTD_ACK.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc22_evo_canlv_d_space_rtd_ack_pack(
    uint8_t *dst_p,
    const struct sc22_evo_canlv_d_space_rtd_ack_t *src_p,
    size_t size);

/**
 * Unpack message dSpace_RTD_ACK.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc22_evo_canlv_d_space_rtd_ack_unpack(
    struct sc22_evo_canlv_d_space_rtd_ack_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t sc22_evo_canlv_d_space_rtd_ack_ctor_en_ack_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_d_space_rtd_ack_ctor_en_ack_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_d_space_rtd_ack_ctor_en_ack_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t sc22_evo_canlv_d_space_rtd_ack_rtd_en_ack_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_d_space_rtd_ack_rtd_en_ack_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_d_space_rtd_ack_rtd_en_ack_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t sc22_evo_canlv_d_space_rtd_ack_reboot_fsm_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sc22_evo_canlv_d_space_rtd_ack_reboot_fsm_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc22_evo_canlv_d_space_rtd_ack_reboot_fsm_is_in_range(int8_t value);


#ifdef __cplusplus
}
#endif

#endif
